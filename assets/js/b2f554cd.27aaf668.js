"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"conditional-rendering","metadata":{"permalink":"/blog/conditional-rendering","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-13-conditional-rendering/index.md","source":"@site/blog/2022-07-13-conditional-rendering/index.md","title":"Conditional Rendering","description":"This is my personal notes on React Docs(Beta) - Conditional Rendering.","date":"2022-07-13T00:00:00.000Z","formattedDate":"July 13, 2022","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"React Docs(Beta) Personal Notes","permalink":"/blog/tags/react-docs-beta-personal-notes"}],"readingTime":3.315,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"conditional-rendering","title":"Conditional Rendering","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["React","React Docs(Beta) Personal Notes"]},"nextItem":{"title":"JavaScript in JSX with Curly Braces","permalink":"/blog/javascript-in-jsx-with-curly-braces"}},"content":"This is my personal notes on React Docs(Beta) - [Conditional Rendering](https://beta.reactjs.org/learn/conditional-rendering).\\n\\nThis doc introduces several ways of conditional rendering. Some of them may seems fancy at first glance, but down to earth they are all just JavaScript.\\n\\n## Conditionally returning JSX - plain JavaScript `if` and `else` statement\\nNothing fancy. Just use JavaScript\'s `if` and `else` statement to determine what JSX the function return.\\n```\\nfunction Item({ name, isPacked }) {\\n  if (isPacked) {\\n    return <li className=\\"item\\">{name} \u2714</li>;\\n  }\\n  return <li className=\\"item\\">{name}</li>;\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride\'s Packing List</h1>\\n      <ul>\\n        <Item \\n          isPacked={true} \\n          name=\\"Space suit\\" \\n        />\\n        <Item \\n          isPacked={true} \\n          name=\\"Helmet with a golden leaf\\" \\n        />\\n        <Item \\n          isPacked={false} \\n          name=\\"Photo of Tam\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n```\\n\\n### Conditionally Retuning `null`\\nIn some situations, you won\u2019t want to render anything at all. For example, say you don\u2019t want to show packed items at all. A component must return something. In this case, you can return null:\\n```\\nif (isPacked) {\\n  return null;\\n}\\nreturn <li className=\\"item\\">{name}</li>;\\n```\\nIn practice, returning null from a component isn\u2019t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component\u2019s JSX. Here\u2019s how to do that!\\n\\n## Conditionally including JSX - ternary operator, logic and operator and conditionally assignment\\nIn the previous examples, there are some duplication. We could use some seemly \\"fancy\\" syntax to make code more [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) including:\\n- ternary operator `? : `\\n- logic and operator `&&`\\n- conditionally assignment\\n\\n### Ternary Operator `? : `\\n```\\nreturn (\\n  <li className=\\"item\\">\\n    {isPacked ? name + \' \u2714\' : name}\\n  </li>\\n);\\n```\\nThis style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up.\\n\\n\\n### Logic And Operator `&&`\\nInside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With &&, you could conditionally render the checkmark only if isPacked is true:\\n```\\nreturn (\\n  <li className=\\"item\\">\\n    {name} {isPacked && \'\u2714\'}\\n  </li>\\n);\\n```\\nA JavaScript && expression returns the value of its right side (in our case, the checkmark) if the left side (our condition) is true. But if the condition is false, the whole expression becomes false. React considers false as a \u201chole\u201d in the JSX tree, just like null or undefined, and doesn\u2019t render anything in its place.\\n\\n### Conditionally Assignment\\nWhen previous shortcuts lead to a complex code, try using plain `if` statement again to modify variable\'s value.\\nYou can reassign variables defined with let, so start by providing the default content you want to display in a `let` variable and reassign it in `if` statements.\\n\\n```\\nfunction Item({ name, isPacked }) {\\n  let itemContent = name;\\n  if (isPacked) {\\n    itemContent = name + \\" \u2714\\";\\n  }\\n  return (\\n    <li className=\\"item\\">\\n      {itemContent}\\n    </li>\\n  );\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride\'s Packing List</h1>\\n      <ul>\\n        <Item \\n          isPacked={true} \\n          name=\\"Space suit\\" \\n        />\\n        <Item \\n          isPacked={true} \\n          name=\\"Helmet with a golden leaf\\" \\n        />\\n        <Item \\n          isPacked={false} \\n          name=\\"Photo of Tam\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n\\n```\\n\\nThis style is more verbose but it looks good to me, since this is just JavaScript reassigning variable. After all conditions checking, we insert the variable using curly braces into JSX. Period.\\n\\n\\n## Recap\\n- In React, you control branching logic with JavaScript.\\n- You can return a JSX expression conditionally with an if statement.\\n- You can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\\n- In JSX, `{cond ? <A /> : <B />}` means \u201cif cond, render `<A />, otherwise <B />\u201d.`\\n- In JSX, `{cond && <A />}` means \u201cif cond, render `<A />`, otherwise nothing\u201d.\\n- The shortcuts are common, but you don\u2019t have to use them if you prefer plain `if`."},{"id":"javascript-in-jsx-with-curly-braces","metadata":{"permalink":"/blog/javascript-in-jsx-with-curly-braces","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-13-javascript-in-jsx-with-curly-braces/index.md","source":"@site/blog/2022-07-13-javascript-in-jsx-with-curly-braces/index.md","title":"JavaScript in JSX with Curly Braces","description":"This is my personal notes on React Docs(Beta) - JavaScript in JSX with Curly Braces.","date":"2022-07-13T00:00:00.000Z","formattedDate":"July 13, 2022","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"React Docs(Beta) Personal Notes","permalink":"/blog/tags/react-docs-beta-personal-notes"}],"readingTime":1.26,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"javascript-in-jsx-with-curly-braces","title":"JavaScript in JSX with Curly Braces","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["React","React Docs(Beta) Personal Notes"]},"prevItem":{"title":"Conditional Rendering","permalink":"/blog/conditional-rendering"},"nextItem":{"title":"Passing Props to a Component","permalink":"/blog/passing-props-to-a-component"}},"content":"This is my personal notes on React Docs(Beta) - [JavaScript in JSX with Curly Braces](https://beta.reactjs.org/learn/javascript-in-jsx-with-curly-braces).\\n\\n## What are the curly braces used for in JSX?\\nAdd some JavaScript inside the markup in the JSX.\\n\\n## Where to use curly braces?\\n1. inside JSX markup\'s tag\\n2. as attributes immediately following the `=` sign inside the JSX markup\'s tag\\n\\n## Sometimes we see \\"double curly braces\\", what does it mean?\\nBesides string, number and other JavaScript expressions, we could also pass JavaScript objects in JSX.\\nObjects in JavaScript are also wrapped in curly braces, therefore, to pass a JavaScript objects in JSX, we need two nested pairs of curly braces.\\nWe could often see this happening in React component\'s inline style:\\n```\\nexport default function TodoList() {\\n  return (\\n    <ul style={{\\n      backgroundColor: \'black\',\\n      color: \'pink\'\\n    }}>\\n      <li>Improve the videophone</li>\\n      <li>Prepare aeronautics lectures</li>\\n      <li>Work on the alcohol-fuelled engine</li>\\n    </ul>\\n  );\\n}\\n```\\nTo make JavaScript object more clear, the code above could also be written like:\\n```\\nexport default function TodoList() {\\n  return (\\n    <ul style={\\n      {\\n        backgroundColor: \'black\',\\n        color: \'pink\'\\n      }\\n    }>\\n      <li>Improve the videophone</li>\\n      <li>Prepare aeronautics lectures</li>\\n      <li>Work on the alcohol-fuelled engine</li>\\n    </ul>\\n  );\\n}\\n```\\n\\n## Recap\\n- Curly braces let you bring JavaScript logic and variables into JSX\'s markup.\\n- Curly braces could appear \\n  - inside the JSX tag content or \\n  - immediately after = in attributes.\\n- `{{` and `}}` is not special syntax: it\u2019s a JavaScript object(inner pair curly braces) tucked inside JSX curly braces(outer pair curly braces)."},{"id":"passing-props-to-a-component","metadata":{"permalink":"/blog/passing-props-to-a-component","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-13-passing-props-to-a-component/index.md","source":"@site/blog/2022-07-13-passing-props-to-a-component/index.md","title":"Passing Props to a Component","description":"This is my personal notes on React Docs(Beta) - Passing Props to a Component.","date":"2022-07-13T00:00:00.000Z","formattedDate":"July 13, 2022","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"React Docs(Beta) Personal Notes","permalink":"/blog/tags/react-docs-beta-personal-notes"}],"readingTime":4.585,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"passing-props-to-a-component","title":"Passing Props to a Component","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["React","React Docs(Beta) Personal Notes"]},"prevItem":{"title":"JavaScript in JSX with Curly Braces","permalink":"/blog/javascript-in-jsx-with-curly-braces"},"nextItem":{"title":"Personal Notes on React Docs(Beta)","permalink":"/blog/react-docs-beta-notes"}},"content":"This is my personal notes on React Docs(Beta) - [Passing Props to a Component](https://beta.reactjs.org/learn/passing-props-to-a-component).\\n\\n## What are props and why we need to pass them?\\nThe official [docs](https://beta.reactjs.org/learn/passing-props-to-a-component) says that:\\n> Props are the information that you pass to a JSX tag. For example, className, src, alt, width, and height are some of the props you can pass to an `<img>`:\\n> ```\\n> function Avatar() {\\n  return (\\n    <img\\n      className=\\"avatar\\"\\n      src=\\"https://i.imgur.com/1bX5QH6.jpg\\"\\n      alt=\\"Lin Lanying\\"\\n      width={100}\\n      height={100}\\n    />\\n  );\\n}\\n> ```\\n\\n> React component use props to communicate with each other. Every parent component can pass some information to its child components by giving them props.\\n\\nThis reminds me [one of Dan Abramov\'s blogs](https://medium.com/@dan_abramov/youre-missing-the-point-of-react-a20e34a51e1a). He said in a similar but more specific way:\\n> Now that we\u2019re not surprised by virtual DOM anymore and it is being adopted by other frameworks and libraries, we can focus on examining React\u2019s true strengths: composition, unidirectional data flow, freedom from DSLs, explicit mutation and static mental model.\\n\\nThe point is that using props to do communication work means that the communication is unidirectional. One comopnent could only pass information down, not up or to any other component of another branch of the whole React tree.\\n\\n## How to pass props?\\nWhen saying \\"pass\\", it means that we have at least two objects. One is going to pass something and the other is going to receive it.\\n\\n### Pass props inside JSX tag\\nFirst, pass some props to Avatar. For example, let\u2019s pass two props: person (an object), and size (a number):\\n```\\nexport default function Profile() {\\n  return (\\n    <Avatar\\n      person={{ name: \'Lin Lanying\', imageId: \'1bX5QH6\' }}\\n      size={100}\\n    />\\n  );\\n}\\n```\\nNow you can read these props inside the Avatar component.\\n\\n### Read props in React functional component as function\'s inputs\\nWe could either declare `props` or [destruct](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Unpacking_fields_from_objects_passed_as_a_function_parameter) `props` in separate variables.\\n```\\n// Without destructing\\nfunction Avatar(props) {\\n  // person and size are available inside props\\n  // props.person\\n  // props.size\\n}\\n```\\n```\\n// With destructing\\nfunction Avatar({ person, size }) {\\n  // person and size are available here\\n}\\n```\\n\\n### Specifying a default value for a prop\\nIf you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter:\\n```\\nfunction Avatar({ person, size = 100 }) {\\n  // ...\\n}\\n```\\n\\nNow, if `<Avatar person={...} />` is rendered with no size prop, the size will be set to 100.\\n\\nThe default value is only used if the size prop is missing or if you pass size={undefined}. But if you pass size={null} or size={0}, the default value will not be used.\\n\\n### Forward props with JSX spread syntax\\nWhen one component doesn\'t touch anything in the incoming props besides passing them down, we could consider using spread syntax to make it more concise.\\n```\\n// Using spread syntax\\nfunction Profile(props) {\\n  return (\\n    <div className=\\"card\\">\\n      <Avatar {...props} />\\n    </div>\\n  );\\n}\\n```\\n```\\n// Not using spread syntax\\nfunction Profile({ person, size, isSepia, thickBorder }) {\\n  return (\\n    <div className=\\"card\\">\\n      <Avatar\\n        person={person}\\n        size={size}\\n        isSepia={isSepia}\\n        thickBorder={thickBorder}\\n      />\\n    </div>\\n  );\\n}\\n```\\n\\nAlthough it seems more concise, it indicates another problem - do we really need to design our components this way?\\nMaybe we need to split things up so that we could pass props to whoever truly need them.\\n\\n\\n### Passing JSX as children\\nWhen you nest content inside a JSX tag, the parent component will receive that content in a prop called children.\\nFor example, the Card component below will receive a children prop set to <Avatar /> and render it in a wrapper div:\\n```\\nimport Avatar from \'./Avatar.js\';\\n\\nfunction Card({ children }) {\\n  return (\\n    <div className=\\"card\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\\nexport default function Profile() {\\n  return (\\n    <Card>\\n      {\\"Das\\"}\\n    </Card>\\n  );\\n}\\n```\\n```\\nimport { getImageUrl } from \'./utils.js\';\\n\\nexport default function Avatar({ person, size }) {\\n  return (\\n    <img\\n      className=\\"avatar\\"\\n      src={getImageUrl(person)}\\n      alt={person.name}\\n      width={size}\\n      height={size}\\n    />\\n  );\\n}\\n\\n```\\n```\\nexport function getImageUrl(person, size = \'s\') {\\n  return (\\n    \'https://i.imgur.com/\' +\\n    person.imageId +\\n    size +\\n    \'.jpg\'\\n  );\\n}\\n```\\n\\nYou can think of a component with a children prop as having a \u201chole\u201d that can be \u201cfilled in\u201d by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, and so on.\\n\\nThis part reminds me of real-world code. I used Meta\'s Docusaurus to build my personal blog, which is just current website you are visiting.\\nIn the `/pages/index.tsx` file, there is a `<Layout>` component and it is doing exactly the samething we mentioned above - acts as a container and is filled with whatever children passed into it. I found a possible repo for the `<Layout>` component at [here](https://github.com/facebook/docusaurus/blob/73ee356949e6baf70732c69cf6be8d8919f3f75a/packages/docusaurus-theme-classic/src/theme/Layout/index.tsx).\\n\\n\\n## Recap\\n- To pass props, add them to the JSX, just like you would with HTML attributes.\\n- To read props, use the function Avatar({ person, size }) destructuring syntax.\\n- You can specify a default value like size = 100, which is used for missing and undefined props.\\n- You can forward all props with <Avatar {...props} /> JSX spread syntax, but don\u2019t overuse it!\\n- Nested JSX like <Card><Avatar /></Card> will appear as Card component\u2019s children prop.\\n- Props are read-only snapshots in time: every render receives a new version of props.\\n- You can\u2019t change props. When you need interactivity, you\u2019ll need to set state."},{"id":"react-docs-beta-notes","metadata":{"permalink":"/blog/react-docs-beta-notes","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-12-react-docs-beta-notes/index.md","source":"@site/blog/2022-07-12-react-docs-beta-notes/index.md","title":"Personal Notes on React Docs(Beta)","description":"- Describing the UI","date":"2022-07-12T00:00:00.000Z","formattedDate":"July 12, 2022","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"React Docs(Beta) Personal Notes","permalink":"/blog/tags/react-docs-beta-personal-notes"}],"readingTime":0.185,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"react-docs-beta-notes","title":"Personal Notes on React Docs(Beta)","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["React","React Docs(Beta) Personal Notes"]},"prevItem":{"title":"Passing Props to a Component","permalink":"/blog/passing-props-to-a-component"},"nextItem":{"title":"Writting Markup with JSX","permalink":"/blog/jsx"}},"content":"- Describing the UI\\n  - Writting Markup with JSX ([docs](https://beta.reactjs.org/learn/writing-markup-with-jsx), [personal notes](https://zwwang98.github.io/blog/jsx))\\n  - JavaScript in JSX with Curly Braces ([docs](https://beta.reactjs.org/learn/javascript-in-jsx-with-curly-braces), [personal notes](https://zwwang98.github.io/blog/javascript-in-jsx-with-curly-braces))\\n  - Passing Props to a Component ([docs](https://beta.reactjs.org/learn/passing-props-to-a-component), [personal notes](https://zwwang98.github.io/blog/passing-props-to-a-component))\\n  - Conditional Rendering ([docs](https://beta.reactjs.org/learn/conditional-rendering), [personal notes](http://zwwang98.github.io/blog/conditional-rendering))"},{"id":"jsx","metadata":{"permalink":"/blog/jsx","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-11-JSX/index.md","source":"@site/blog/2022-07-11-JSX/index.md","title":"Writting Markup with JSX","description":"This is my personal notes on React Docs(Beta) - Writting Markup with JSX.","date":"2022-07-11T00:00:00.000Z","formattedDate":"July 11, 2022","tags":[{"label":"React","permalink":"/blog/tags/react"},{"label":"React Docs(Beta) Personal Notes","permalink":"/blog/tags/react-docs-beta-personal-notes"}],"readingTime":2.375,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"jsx","title":"Writting Markup with JSX","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["React","React Docs(Beta) Personal Notes"]},"prevItem":{"title":"Personal Notes on React Docs(Beta)","permalink":"/blog/react-docs-beta-notes"},"nextItem":{"title":"What is Servlet?","permalink":"/blog/servlet"}},"content":"This is my personal notes on React Docs(Beta) - [Writting Markup with JSX](https://beta.reactjs.org/learn/writing-markup-with-jsx).\\n\\n## What is JSX?\\nJSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file.\\n\\n## Why do we need JSX?\\n- The Web has been built on HTML(for content), CSS(for style or design) and JavaScript(for logic) and built on separate `.html`, `.css` and `.js` files. \\n  However, all of them serve for the same purpose -- build something users see. \\n  It makes more sense to put related things together. That is why JSX came out.\\n- In React, rendering logic and markup live together in the same place - component. \\n  Based on my understanding, React chose to put HTML into JavaScript - that is what JSX looks like to me.\\n  As the [docs](https://beta.reactjs.org/learn/writing-markup-with-jsx) says:\\n  > Each React component is a JavaScript function that may contain some markup that React renders into the browser.\\n    React components use a syntax extension called JSX to represent that markup.\\n    JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.\\n    The best way to understand this is to convert some HTML markup to JSX markup.\\n\\n## Rules of JSX\\n1. Return a single root element\\n  - In a React function component, markup is returned at the end of the function.\\n  - We need to wrap all markup tags in one single parent tag. Usually the single parent tag will be `<div></div>` or `<></>`(called React Fragment).\\n  - This is because JSX looks like HTML in JavaScript, but under the hood it is transformed into plain JavaScript. \\n    So in function component we are basically return something in a JavaScript function.\\n    JavaScript function doesn\'t allow multiple values unless you wrap them into an array or an object and return the array or the object.\\n2. Close all the tags\\n  > JSX requires tags to be explicitly closed: self-closing tags like `<img>` must become `<img />`, and wrapping tags like `<li>`oranges must be written as `<li>oranges</li>`.\\n3. camelCase most of the things\\n  - JSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables.\\n  - But JavaScript has some limitations on variable names. For example, no dashes or reserved words allowed.\\n\\n## Convert HTML to JSX markup\\nHTML and markup in React have different rules. Converting lots of things manually could be tedious.\\nSome [online converter](https://transform.tools/html-to-jsx) could be helpful especially when you have lots of HTML to be converted into React JSX.\\n\\n## Recap\\n- React components group rendering logic together with markup because they are related.\\n- JSX is similar to HTML, with a few differences. You can use a converter if you need to.\\n- Error messages will often point you in the right direction to fixing your markup."},{"id":"servlet","metadata":{"permalink":"/blog/servlet","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-08-servlet/index.md","source":"@site/blog/2022-07-08-servlet/index.md","title":"What is Servlet?","description":"About Servlet","date":"2022-07-08T00:00:00.000Z","formattedDate":"July 8, 2022","tags":[{"label":"Java","permalink":"/blog/tags/java"},{"label":"Servelet","permalink":"/blog/tags/servelet"}],"readingTime":3.12,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"servlet","title":"What is Servlet?","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["Java","Servelet"]},"prevItem":{"title":"Writting Markup with JSX","permalink":"/blog/jsx"},"nextItem":{"title":"Apache Tomcat","permalink":"/blog/tomcat"}},"content":"## About Servlet  \\nSo what is Servelet? Google Search results say:\\n> A servlet is a small Java program that runs within a Web server.\\n\\nI found it helpful to understand the word from an Etymology aspect.\\n1. On [Wikitionary](https://en.wiktionary.org/wiki/servlet), it says that servlet is just a \\"Blend of server + applet\\".\\n2. You may have questions about what does \\"applet\\" mean if you are also a non-native English speaker or haven\'t seen this word before. On [Wikitionary](https://en.wiktionary.org/wiki/applet#English), it says that applet is just \\"app + -let\\". \\"-let\\" is a\\" diminutive suffix that attached to nouns\\"(from [this](https://www.dictionary.com/browse/-let#:~:text=%2Dlet,noun%20(anklet%3B%20wristlet))).\\n\\nEtymology knowledge above just helps me better understand these fancy words. Now based on my understanding:\\n1. \\"-let\\" is a suffix in English. Attaching \\"-let\\" after some nouns could make a word whose meaning is just a small part or piece of the object that noun refers\\n2. \\"applet\\" is just a small part of an app\\n3. \\"servelet\\" is a small part of an app that has something to do with the server\\n\\nNow let\'s check the description from those official documents. It just makes more sense to me after all these seemly boring Etymology analysis:\\n  * applet (from [wikitionary](https://en.wiktionary.org/wiki/applet#English))\\n   ![applet meaning on wikitionary](./applet-wikitionary.png)\\n  * servlet (from [wikitionary](https://en.wiktionary.org/wiki/servlet))\\n   ![servlet meaning on wikitionary](servlet-wikitionary.png)\\n\\nWe could also check detailed definition and explanation at [JavaEE 6 Docs](https://docs.oracle.com/javaee/6/api/javax/servlet/Servlet.html#:~:text=A%20servlet%20is%20a%20small,servlet.):\\n\\n> `public interface Servlet`  \\n> Defines methods that all servlets must implement. A servlet is a small Java program that runs within a Web server. Servlets receive and respond to requests from Web clients, usually across HTTP, the HyperText Transfer Protocol. To implement this interface, you can write a generic servlet that extends javax.servlet.\\n\\nSo based on the official docs, `Servlet` is just a Java interface. \\n\\nTo sum up, we could write Java code to implement Servelet and put those code into Apache Tomcat and then we could run these code. We will see how to do that soon.\\n\\n\\n## Servlet Quick Start\\n1. Create a new Java EE project in Intellij IDEA\\n2. Import `Servlet` dependency in `pom.xml`\\n3. Create a new class that implements `Servlet` interface. Override all methods needed(`init()`, `service()` etc.)\\n4. Configure path using annotation `@WebServlet(\\"/demo1\\")`\\n5. Run the project with Apache Tomcat and visite the `Servlet`\\n\\n\\n## `Servlet` as an Interface\\nAs we discussed above, `Servlet` is a Java interface. It difines 5 methods that all classes implementing `Servlet` must override these methods:\\n![servlet method summary](./servlet-method-summary.png)\\n\\nMore details on [Java EE 6](https://docs.oracle.com/javaee/6/api/javax/servlet/Servlet.html).\\n\\nWe should pay more attention on `service()` method, since this method handles requests  and generates responses.\\n\\n\\n## `HttpServlet`\\nAs the name indicates, `HttpServlet` is just a special type of `Servlet`. `HttpServlet` is an abstract Java class implementing `Servlet` interface.\\n\\nAs we could see on Java EE docs:\\n- `public abstract class HttpServlet extends GenericServlet` \\n  (from [this](https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html))\\n- `public abstract class GenericServlet extends Object implements Servlet, ServletConfig, Serializable`\\n  (from [this](https://docs.oracle.com/javaee/7/api/javax/servlet/GenericServlet.html))\\n\\n`HttpServlet` is important because today we usually build server for browser and browser communicate with server on HTTP protocol.\\n\\nHow does `HttpServlet` work? I think [Java EE docs](https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html) could give us some hints:\\n> There\'s almost no reason to override the service method. service handles standard HTTP requests by dispatching them to the handler methods for each HTTP request type (the doXXX methods listed above).\\nWe could even implement our own `HttpServlet`:\\n1. Cast the incoming request from `ServletRequest` type into `HttpServletRequest` type\\n2. Check HTTP method name\\n3. Based on HTTP method name of the request, dispatch it to corresponding handler method\\nThe handler methods we metioned above, is just the `doXXX` method in [Java EE HttpServlet](https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html)\\n\\n\\n## Configure `urlPattern` of `Servlet`\\nTo be able to handle request, a `Servlet` need to have its own URLs.\\n\\nWe could configure a `Servlet`\'s URL by annotation `@WebServlet`."},{"id":"tomcat","metadata":{"permalink":"/blog/tomcat","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-07-03-tomcat/index.md","source":"@site/blog/2022-07-03-tomcat/index.md","title":"Apache Tomcat","description":"About Apache Tomcat","date":"2022-07-03T00:00:00.000Z","formattedDate":"July 3, 2022","tags":[{"label":"Apache Tomcat","permalink":"/blog/tags/apache-tomcat"},{"label":"Apache","permalink":"/blog/tags/apache"},{"label":"Java","permalink":"/blog/tags/java"},{"label":"Servelet","permalink":"/blog/tags/servelet"}],"readingTime":3.645,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"tomcat","title":"Apache Tomcat","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["Apache Tomcat","Apache","Java","Servelet"]},"prevItem":{"title":"What is Servlet?","permalink":"/blog/servlet"},"nextItem":{"title":"Useful Shortcuts on Intellij Idea","permalink":"/blog/intellij-idea-useful-shortcuts"}},"content":"## About Apache Tomcat\\nSo what is Tomcat? Roughly speaking, it is a Java Servelet container.\\n\\nSo what is Servelet? I found it helpful to understand the word from an Etymology aspect.\\n1. On [Wikitionary](https://en.wiktionary.org/wiki/servlet), it says that servlet is just a \\"Blend of server + applet\\".\\n2. You may have questions about what does \\"applet\\" mean if you are also a non-native English speaker or haven\'t seen this word before. On [Wikitionary](https://en.wiktionary.org/wiki/applet#English), it says that applet is just \\"app + -let\\". \\"-let\\" is a\\" diminutive suffix that attached to nouns\\"(from [this](https://www.dictionary.com/browse/-let#:~:text=%2Dlet,noun%20(anklet%3B%20wristlet))).\\n\\nEtymology knowledge above just helps me better understand these fancy words. Now based on my understanding:\\n1. \\"-let\\" is a suffix in English. Attaching \\"-let\\" after some nouns could make a word whose meaning is just a small part or piece of the object that noun refers\\n2. \\"applet\\" is just a small part of an app\\n3. \\"servelet\\" is a small part of an app that has something to do with the server\\n\\nNow let\'s check the description from those official documents. It just makes more sense to me after all these seemly boring Etymology analysis:\\n  * applet (from [wikitionary](https://en.wiktionary.org/wiki/applet#English))\\n   ![applet meaning on wikitionary](./applet-wikitionary.png)\\n  * servlet (from [wikitionary](https://en.wiktionary.org/wiki/servlet))\\n   ![servlet meaning on wikitionary](servlet-wikitionary.png)\\n\\nWe could also check detailed definition and explanation at [JavaEE 6 Docs](https://docs.oracle.com/javaee/6/api/javax/servlet/Servlet.html#:~:text=A%20servlet%20is%20a%20small,servlet.):\\n\\n> `public interface Servlet`  \\n> Defines methods that all servlets must implement. A servlet is a small Java program that runs within a Web server. Servlets receive and respond to requests from Web clients, usually across HTTP, the HyperText Transfer Protocol. To implement this interface, you can write a generic servlet that extends javax.servlet.\\n\\n\\nSo based on the official docs, `Servlet` is just a Java interface. \\n\\nTo sum up, we could write Java code to implement Servelet and put those code into Apache Tomcat and then we could run these code. We will see how to do that soon.\\n\\n\\n\\n## Apache Tomcat Quick Start\\nMy device:\\n- macOS Monterey 12.0.1\\n- Macbook Pro M1 2020\\n\\n### How to Install Tomcat Locally\\n1. Install Apache Tomcat on its (official website)[https://tomcat.apache.org/]. I chose to download Tomcat Version 8 in zip.\\n2. Unzip it wherever you want.\\n\\n### Tomcat Directory Structure\\nTo better understand Tomcat, let\'s check its directory structure. I found something userful from Tomcat [docs](https://tomcat.apache.org/tomcat-3.3-doc/tomcat-ug.html#directory_structure):\\n![tomcat directory structure](./tomcat-directory-structure.png)\\n\\nWe should pay more attention to those folders: `bin`, `conf`, `webapps`.\\n- `bin`: excutable files\\n- `conf`: configurations\\n- `webapps`: web applications\\n\\n### How to Start a Tomcat Server\\n3. In terminal, find the `start.sh` file under `bin` folder. If you are in windows OS, you should run `start.bat` instead.\\n4. Before run it, give permissions to all files ending with `.sh` by running the command below in terminal:  \\n   `chmod +x *.sh`\\n5. Now we could run `./start.sh` in terminal.  \\n   Make sure you are under `./apache-tomcat-{version}/bin/`.\\n6. The terminal will show something like below:\\n   ![tomcat started terminal screenshot](./tomcat-started.png)\\n\\n   Check at [localhost:8080](localhost:8080), you will see something like below:\\n   ![tomcat localhost:8080 screenshot](tomcat-localhost.png)\\n\\n### How to End a Tomcat Server\\nTo end a tomcat server in terminal, run\\n```\\npkill -9 -f tomcat\\n```\\n(from [stackoverflow](https://stackoverflow.com/questions/15236308/how-do-i-kill-this-tomcat-process-in-terminal))\\n\\n\\n\\n### How to Configure a Tomcat Server\\nWe could configure a Tomcat server in its `/conf/server.xml` file.\\n\\nSay we want to change the PORT. We could configure Tomcat\'s PORT in `/conf/server.xml`. Changing the `port` value is all we need to do.\\n![configure tomcat\'s port](./tomcat-config-port.png)\\n\\nSpecifically, if we configure the PORT as `80`, then we could visit the local Tomcat server without specifying the port on browser url with just `localhost`. This is because `80` is also the PORT for HTTP.\\n\\n\\n### How to Deploy an Application in Tomcat?\\nAll we need to do is put files under `webapps` directory. There are some ways to do so:\\n1. Simply copy original files and paste them under `webapps` directory\\n2. Convert original files into `.war` files, copy those `.war` files and paste them under `webapps` directory. As the [docs](https://tomcat.apache.org/tomcat-3.3-doc/tomcat-ug.html#directory_structure) specified, \\"Any .war files placed here will be automatically expanded\\".\\n\\n\\n## How to Integrate Tomcat in Intellij IDEA?\\n### Add Local Tomcat Server\\nCheck the Intellij IDEA\'s guide on Tomcat Server.\\n> [Run/Debug Configuration: Tomcat Server](https://www.jetbrains.com/help/idea/run-debug-configuration-tomcat-server.html)\\n\\n### Add Tomcat Plugin in `pom.xml`\\nWe could also add Tomcat through `pom.xml`.\\n\\n1. Add Tomcat plugin in `pom.xml`:\\n   ![maven tomcat plugin in pom.xml](./maven-tomcat-plugin.png)\\n\\n2. Use Maven Helper (download from [marketplace](https://plugins.jetbrains.com/plugin/7179-maven-helper)) to start the project:\\n   ![maven hepler run tomcat](./maven-hepler-run-tomcat.png)"},{"id":"intellij-idea-useful-shortcuts","metadata":{"permalink":"/blog/intellij-idea-useful-shortcuts","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-23-intellij-idea-useful-shortcuts.md","source":"@site/blog/2022-06-23-intellij-idea-useful-shortcuts.md","title":"Useful Shortcuts on Intellij Idea","description":"Print","date":"2022-06-23T00:00:00.000Z","formattedDate":"June 23, 2022","tags":[{"label":"Intellij Idea","permalink":"/blog/tags/intellij-idea"},{"label":"Java","permalink":"/blog/tags/java"}],"readingTime":0.205,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"intellij-idea-useful-shortcuts","title":"Useful Shortcuts on Intellij Idea","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["Intellij Idea","Java"]},"prevItem":{"title":"Apache Tomcat","permalink":"/blog/tomcat"},"nextItem":{"title":"Interesting Websites","permalink":"/blog/interesting-websites"}},"content":"### Print\\n1. `sout`: Prints  \\n   `System.out.println();`\\n2. `soutm`: Prints current class and method names to System.out  \\n   `System.out.println(\\"$CLASS_NAME$.$METHOD_NAME$\\");`\\n3. `soutp`: Prints method parameter names and values to System.out  \\n   `System.out.println($FORMAT$);`\\n4. `soutv`: Prints a value to System.out  \\n   `System.out.println(\\"$EXPR_COPY$ = \\" + $EXPR$);`\\n\\n[Source](https://stackoverflow.com/questions/38992114/system-out-println-shortcut-on-intellij-idea)"},{"id":"interesting-websites","metadata":{"permalink":"/blog/interesting-websites","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-23-interestingWebsites/index.md","source":"@site/blog/2022-06-23-interestingWebsites/index.md","title":"Interesting Websites","description":"killedbygoogle","date":"2022-06-23T00:00:00.000Z","formattedDate":"June 23, 2022","tags":[{"label":"Intellij Idea","permalink":"/blog/tags/intellij-idea"},{"label":"Java","permalink":"/blog/tags/java"}],"readingTime":0.04,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"interesting-websites","title":"Interesting Websites","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["Intellij Idea","Java"]},"prevItem":{"title":"Useful Shortcuts on Intellij Idea","permalink":"/blog/intellij-idea-useful-shortcuts"},"nextItem":{"title":"Useful Resources for Writting Blogs","permalink":"/blog/useful-resources-for-writting-blogs"}},"content":"[killedbygoogle](https://killedbygoogle.com/)\\n![killedbygoogle website screenshot at 2022 June 23rd](./killedbygoogle.png)"},{"id":"useful-resources-for-writting-blogs","metadata":{"permalink":"/blog/useful-resources-for-writting-blogs","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-22-useful-links-for-writting-blogs.md","source":"@site/blog/2022-06-22-useful-links-for-writting-blogs.md","title":"Useful Resources for Writting Blogs","description":"markdown syntax","date":"2022-06-22T00:00:00.000Z","formattedDate":"June 22, 2022","tags":[{"label":"resources","permalink":"/blog/tags/resources"}],"readingTime":0.05,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"useful-resources-for-writting-blogs","title":"Useful Resources for Writting Blogs","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["resources"]},"prevItem":{"title":"Interesting Websites","permalink":"/blog/interesting-websites"},"nextItem":{"title":"How to deploy your website on github pages without repo name?","permalink":"/blog/deploy-on-github-pages-without-repo-name"}},"content":"### markdown syntax\\n1. https://www.markdownguide.org/basic-syntax/\\n2. [Generate table in markdown](https://www.tablesgenerator.com/markdown_tables)"},{"id":"deploy-on-github-pages-without-repo-name","metadata":{"permalink":"/blog/deploy-on-github-pages-without-repo-name","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-22-DeployOnGithubPages/index.md","source":"@site/blog/2022-06-22-DeployOnGithubPages/index.md","title":"How to deploy your website on github pages without repo name?","description":"Situation","date":"2022-06-22T00:00:00.000Z","formattedDate":"June 22, 2022","tags":[{"label":"deploy on github","permalink":"/blog/tags/deploy-on-github"}],"readingTime":0.86,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"deploy-on-github-pages-without-repo-name","title":"How to deploy your website on github pages without repo name?","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["deploy on github"]},"prevItem":{"title":"Useful Resources for Writting Blogs","permalink":"/blog/useful-resources-for-writting-blogs"},"nextItem":{"title":"How to Embed Live Code Editor in your Website?","permalink":"/blog/sandpack"}},"content":"### Situation\\nWhen I was deploying my website on github pages, I found that the deployment url always containing my repo name. The whole url was \'https://zwwang98.github.io/blog\' and I want it to be just \'https://zwwang98.github.io/\'. Here\'s what I have done to solve this problem.\\n\\n### Action\\n1. Changed my website\'s repo name into `<username>.github.io`.  \\n   Say if your github user name is \\"user\\", then your repo for generating a github page without trailing repo name must be \\"user.github.io\\".\\n2. Deploy it. In your repo:  \\n   `settings` -> `pages` -> choose the `source` and click `save`\\n\\n   ![how to deploy on github](./how-to-deploy-on-github.png)\\n\\n### Summary\\nBased on [github docs](https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites),  \\n> There are three types of GitHub Pages sites: project, user, and organization.\\n\\nBased on my understanding, the repo name constraints and the result github pages url are listed below:  \\n\\n|              | Repo Name                  | Result Site                                                                                          |\\n|--------------|----------------------------|------------------------------------------------------------------------------------------------------|\\n| project      | any name you want          | `http(s)://<username>.github.io/<repository>`  or  `http(s)://<organization>.github.io/<repository>` |\\n| user         | `<username>.github.io`     | `http(s)://<username>.github.io`                                                                     |\\n| organization | `<organization>.github.io` | `http(s)://<organization>.github.io`                                                                 |\\n\\n\\n\\n### Reference\\nhttps://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#types-of-github-pages-sites"},{"id":"sandpack","metadata":{"permalink":"/blog/sandpack","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-22-sandpack/index.mdx","source":"@site/blog/2022-06-22-sandpack/index.mdx","title":"How to Embed Live Code Editor in your Website?","description":"When I was reading React Docs Beta, I found an editable code block and its live rendering result on that page.","date":"2022-06-22T00:00:00.000Z","formattedDate":"June 22, 2022","tags":[{"label":"blog","permalink":"/blog/tags/blog"}],"readingTime":0.75,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"sandpack","title":"How to Embed Live Code Editor in your Website?","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["blog"]},"prevItem":{"title":"How to deploy your website on github pages without repo name?","permalink":"/blog/deploy-on-github-pages-without-repo-name"},"nextItem":{"title":"My Experience on Using Material UI","permalink":"/blog/experience-on-material-ui"}},"content":"import { Sandpack } from \\"@codesandbox/sandpack-react\\";\\n\\nWhen I was reading [React Docs Beta](https://beta.reactjs.org/learn#sharing-data-between-components), I found an editable code block and its live rendering result on that page.\\nI was wondering how to do so and maybe I could use this tool for my own website. Then I opened the chrome console and seleted the element I was interested in and found the corresponding html code like below:\\n![react-docs-editable-code-block-screenshot](./react-docs-editable-code-block-screenshot.png)\\n\\nThe div has a class attribute \\"sandpack-container\\" that sounds like sandbox. So I googled it and this is what I found:\\n![sandpack-website-screenshot](./sandpack-website-screenshot.png)\\n\\nAnd this is what we will discuss.\\n\\n## Sandpack\\n### What is Sandpack\\nOn their [website](https://sandpack.codesandbox.io/), it says that:\\n\\n> A component toolkit for creating live-running code editing experiences, using the power of CodeSandbox.\\n\\n### Running Example\\nFollowing [Sandpack\'s Docs](https://sandpack.codesandbox.io/docs/), I added this running Sandpack react component for writting React below. Feel free to give it a try!\\n\\n<Sandpack template=\\"react\\"></Sandpack>"},{"id":"experience-on-material-ui","metadata":{"permalink":"/blog/experience-on-material-ui","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2022-06-06-mui/index.md","source":"@site/blog/2022-06-06-mui/index.md","title":"My Experience on Using Material UI","description":"What is Material UI","date":"2022-06-06T00:00:00.000Z","formattedDate":"June 6, 2022","tags":[{"label":"material ui","permalink":"/blog/tags/material-ui"},{"label":"front end","permalink":"/blog/tags/front-end"},{"label":"react","permalink":"/blog/tags/react"}],"readingTime":0.055,"truncated":false,"authors":[{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"}],"frontMatter":{"slug":"experience-on-material-ui","title":"My Experience on Using Material UI","authors":{"name":"Ziwei Wang","title":"this website owner","url":"https://github.com/zwwang98","image_url":"https://github.com/zwwang98.png","imageURL":"https://github.com/zwwang98.png"},"tags":["material ui","front end","react"]},"prevItem":{"title":"How to Embed Live Code Editor in your Website?","permalink":"/blog/sandpack"}},"content":"### What is Material UI\\n\\n\\n### MUI Components I have used"}]}')}}]);